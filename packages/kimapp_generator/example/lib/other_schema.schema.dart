// dart format width=80
// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// KimappSchemaGenerator
// **************************************************************************

// ignore_for_file: invalid_annotation_target, unused_import, require_trailing_commas
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:kimapp/kimapp.dart';

import 'other_schema.dart';

part 'other_schema.schema.freezed.dart';
part 'other_schema.schema.g.dart';

/// Defines the table structure for Other.
/// This class provides constant string values for table and column names,
/// facilitating type-safe database operations and query building.
class OtherTable {
  const OtherTable._();

  /// The name of the database table for Other entities.
  /// Use this constant for constructing SQL queries to ensure consistency.
  static const String table = "others";

  /// Column: id
  /// This is the primary key column for the Other table.
  /// Data type: `int`
  /// Key: `id`
  static const String id = "id";

  /// Column: name
  /// Data type: `String`
  /// Key: `name`
  static const String name = "name";
}

/// Represents the unique identifier for a Other.
/// This class wraps the `int` value, providing type safety and encapsulation.
class OtherId extends Identity<int> {
  const OtherId._(this.value);

  @override
  final int value;

  /// Creates an instance of OtherId from a JSON value.
  /// Accepts int representations.
  /// Throws ArgumentError if the value is null or not of type int.
  factory OtherId.fromJson(dynamic value) {
    if (value is int) {
      return OtherId._(value);
    } else if (value == null) {
      throw ArgumentError.notNull('value');
    } else {
      throw ArgumentError(
          'Value of OtherId must be of type int, but was ${value.runtimeType}. Please provide the correct type.');
    }
  }

  /// Creates an instance of OtherId from a int value.
  factory OtherId.fromValue(int value) {
    return OtherId._(value);
  }

  /// Creates an instance of OtherId with a value of -1.
  /// This is used to represent an empty or invalid OtherId for placeholder or default values of form fields.
  /// WARNING: This is not a valid OtherId access it value through [value] or [call] will throw an error.
  factory OtherId.empty() => OtherId._(-1);
}

/// Base class of this schema, this is the parent of all generated models in this schema
abstract class BaseOtherSchema {}

/// Base model class for this schema, this includes all properties of the base model, and get inherited by all generated models in this schema where [inheritAllFromBase()] is called and without any excepted fields.
abstract class IOtherModel {
  OtherId get id;
  String get name;
}

/// Base model class for OtherModel.
@freezed
sealed class OtherModel
    with _$OtherModel
    implements BaseOtherSchema, IOtherModel {
  const OtherModel._();

  /// Constructor for OtherModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled` (`others`)
  ///
  /// Fields:
  /// - OtherId id : JsonKey('id')
  /// - String name : JsonKey('name')
  @TableModel(OtherModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory OtherModel({
    @JsonKey(name: OtherModel.idKey) required OtherId id,
    @JsonKey(name: OtherModel.nameKey) required String name,
  }) = _OtherModel;

  /// Creates an instance of OtherModel from a JSON map.
  factory OtherModel.fromJson(Map<String, dynamic> json) =>
      _$OtherModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableOtherModel;

  /// Table name: `others`
  static const String tableName = "others";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for name field with JsonKey('name')
  static const String nameKey = "name";
}
