// dart format width=80
// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// KimappSchemaGenerator
// **************************************************************************

// ignore_for_file: invalid_annotation_target, unused_import, require_trailing_commas
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:kimapp/kimapp.dart';

import 'package:example/other_schema.schema.dart';
import 'demo_schema.dart';

part 'demo_schema.schema.freezed.dart';
part 'demo_schema.schema.g.dart';

/// Defines the table structure for Demo.
/// This class provides constant string values for table and column names,
/// facilitating type-safe database operations and query building.
class DemoTable {
  const DemoTable._();

  /// The name of the database table for Demo entities.
  /// Use this constant for constructing SQL queries to ensure consistency.
  static const String table = "demos";

  /// Column: name
  /// Data type: `String?`
  /// Key: `name`
  static const String name = "name";

  /// Column: description
  /// Data type: `String?`
  /// Key: `description`
  static const String description = "description";

  /// Column: age
  /// Data type: `int`
  /// Key: `age`
  static const String age = "age";

  /// Column: birthdate
  /// Data type: `DateTime?`
  /// Key: `birthdate`
  static const String birthdate = "birthdate";

  /// Column: address
  /// Data type: `String?`
  /// Key: `address`
  static const String address = "address";

  /// Column: other_id
  /// This is a join key for field other.
  /// Data type: `OtherModel?`
  /// Key: `other`
  static const String other = "other";
}

/// Base class of this schema, this is the parent of all generated models in this schema
abstract class BaseDemoSchema {}

/// Base model class for this schema, this includes all properties of the base model, and get inherited by all generated models in this schema where [inheritAllFromBase()] is called and without any excepted fields.
abstract class IDemoModel {
  String? get name;
  String? get description;
  int get age;
  DateTime? get birthdate;
  String? get address;
  OtherModel? get other;
}

/// Base model class for DemoModel.
@freezed
sealed class DemoModel with _$DemoModel implements BaseDemoSchema, IDemoModel {
  const DemoModel._();

  /// Constructor for DemoModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled` (`demos`)
  ///
  /// Fields:
  /// - String? name : JsonKey('name')
  /// - String? description : JsonKey('description')
  /// - int age : JsonKey('age')
  /// - DateTime? birthdate : JsonKey('birthdate')
  /// - String? address : JsonKey('address')
  /// - OtherModel? other : JsonKey('other')
  @TableModel(DemoModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory DemoModel({
    @JsonKey(name: DemoModel.nameKey) required String? name,
    @JsonKey(name: DemoModel.descriptionKey) required String? description,
    @JsonKey(name: DemoModel.ageKey) required int age,
    @JsonKey(name: DemoModel.birthdateKey) required DateTime? birthdate,
    @JsonKey(name: DemoModel.addressKey) required String? address,
    @JoinedColumn(foreignKey: "other_id", candidateKey: null)
    @JsonKey(name: DemoModel.otherKey)
    required OtherModel? other,
  }) = _DemoModel;

  /// Creates an instance of DemoModel from a JSON map.
  factory DemoModel.fromJson(Map<String, dynamic> json) =>
      _$DemoModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableDemoModel;

  /// Table name: `demos`
  static const String tableName = "demos";

  /// Field name for name field with JsonKey('name')
  static const String nameKey = "name";

  /// Field name for description field with JsonKey('description')
  static const String descriptionKey = "description";

  /// Field name for age field with JsonKey('age')
  static const String ageKey = "age";

  /// Field name for birthdate field with JsonKey('birthdate')
  static const String birthdateKey = "birthdate";

  /// Field name for address field with JsonKey('address')
  static const String addressKey = "address";

  /// Field name for other field with JsonKey('other')
  /// This is json key for joined field. with foreign key: other_id and candidate key: null
  static const String otherKey = "other";
}

/// Represents the DemoDetailModel model. generated by kimapp_generator
@freezed
sealed class DemoDetailModel
    with _$DemoDetailModel
    implements BaseDemoSchema, IDemoModel {
  const DemoDetailModel._();

  /// Constructor for DemoDetailModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled`
  /// Table Name: `v_demo_detail`
  ///
  /// Fields:
  /// - String? name : JsonKey('name')
  /// - String? description : JsonKey('description')
  /// - int age : JsonKey('age')
  /// - DateTime? birthdate : JsonKey('birthdate')
  /// - String? address : JsonKey('address')
  /// - OtherModel? other : JsonKey('other')
  @TableModel(DemoDetailModel.tableName)
  @JsonSerializable(explicitToJson: true)
  const factory DemoDetailModel({
    @JsonKey(name: DemoDetailModel.nameKey) required String? name,
    @JsonKey(name: DemoDetailModel.descriptionKey) required String? description,
    @JsonKey(name: DemoDetailModel.ageKey) required int age,
    @JsonKey(name: DemoDetailModel.birthdateKey) required DateTime? birthdate,
    @JsonKey(name: DemoDetailModel.addressKey) required String? address,
    @JoinedColumn(foreignKey: "other_id", candidateKey: null)
    @JsonKey(name: DemoDetailModel.otherKey)
    required OtherModel? other,
  }) = _DemoDetailModel;

  /// Creates an instance of DemoDetailModel from a JSON map.
  factory DemoDetailModel.fromJson(Map<String, dynamic> json) =>
      _$DemoDetailModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableDemoDetailModel;

  /// Table name: `v_demo_detail`
  static const String tableName = "v_demo_detail";

  /// Field name for name field with JsonKey('name')
  static const String nameKey = "name";

  /// Field name for description field with JsonKey('description')
  static const String descriptionKey = "description";

  /// Field name for age field with JsonKey('age')
  static const String ageKey = "age";

  /// Field name for birthdate field with JsonKey('birthdate')
  static const String birthdateKey = "birthdate";

  /// Field name for address field with JsonKey('address')
  static const String addressKey = "address";

  /// Field name for other field with JsonKey('other')
  /// This is json key for joined field. with foreign key: other_id and candidate key: null
  static const String otherKey = "other";

  /// Converts this model to a base model.
  DemoModel toDemoModel() {
    return DemoModel(
      name: name,
      description: description,
      age: age,
      birthdate: birthdate,
      address: address,
      other: other,
    );
  }
}

/// Represents the DemoLiteModel model. generated by kimapp_generator
@freezed
sealed class DemoLiteModel with _$DemoLiteModel implements BaseDemoSchema {
  const DemoLiteModel._();

  /// Constructor for DemoLiteModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `disabled`
  ///
  /// Fields:
  /// - String? name : JsonKey('name')
  /// - int age : JsonKey('age')
  /// - DateTime? birthdate : JsonKey('birthdate')
  /// - String? address : JsonKey('address')
  /// - OtherModel? other : JsonKey('other')
  @JsonSerializable(explicitToJson: true)
  const factory DemoLiteModel({
    @JsonKey(name: DemoLiteModel.nameKey) required String? name,
    @JsonKey(name: DemoLiteModel.ageKey) required int age,
    @JsonKey(name: DemoLiteModel.birthdateKey) required DateTime? birthdate,
    @JsonKey(name: DemoLiteModel.addressKey) required String? address,
    @JoinedColumn(foreignKey: "other_id", candidateKey: null)
    @JsonKey(name: DemoLiteModel.otherKey)
    required OtherModel? other,
  }) = _DemoLiteModel;

  /// Creates an instance of DemoLiteModel from a JSON map.
  factory DemoLiteModel.fromJson(Map<String, dynamic> json) =>
      _$DemoLiteModelFromJson(json);

  /// Field name for name field with JsonKey('name')
  static const String nameKey = "name";

  /// Field name for age field with JsonKey('age')
  static const String ageKey = "age";

  /// Field name for birthdate field with JsonKey('birthdate')
  static const String birthdateKey = "birthdate";

  /// Field name for address field with JsonKey('address')
  static const String addressKey = "address";

  /// Field name for other field with JsonKey('other')
  /// This is json key for joined field. with foreign key: other_id and candidate key: null
  static const String otherKey = "other";
}
