// GENERATED CODE - DO NOT MODIFY BY HAND

// **************************************************************************
// KimappSchemaGenerator
// **************************************************************************

// ignore_for_file: invalid_annotation_target, unused_import
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:kimapp/kimapp.dart';

import 'package:example/other_schema.schema.dart';
import 'demo_schema.dart';

part 'demo_schema.schema.freezed.dart';
part 'demo_schema.schema.g.dart';

/// Defines the table structure for Demo.
/// This class provides constant string values for table and column names,
/// facilitating type-safe database operations and query building.
class DemoTable {
  const DemoTable._();

  /// The name of the database table for Demo entities.
  /// Use this constant for constructing SQL queries to ensure consistency.
  static const String table = "demos";

  /// Column: id
  /// This is the primary key column for the Demo table.
  /// Data type: `int`
  /// Key: `id`
  static const String id = "id";

  /// Column: name
  /// Data type: `String?`
  /// Key: `name`
  static const String name = "name";

  /// Column: description
  /// Data type: `String?`
  /// Key: `description`
  static const String description = "description";

  /// Column: ignore
  /// This column is ignored for base class generator.
  /// Key: `null`
  static const String ignore = "ignore";

  /// List of all column names for Demo table.
  static const List<String> allColumns = [
    id,
    name,
    description,
    ignore,
  ];

  /// List of primary key column names for Demo table.
  static const List<String> primaryKeys = [
    id,
  ];
}

/// Represents the unique identifier for a Demo.
/// This class wraps the `int` value, providing type safety and encapsulation.
class DemoId extends Identity<int> {
  const DemoId._(this.value);

  @override
  final int value;

  /// Creates an instance of DemoId from a JSON value.
  /// Accepts int representations.
  /// Throws ArgumentError if the value is null or not of type int.
  factory DemoId.fromJson(dynamic value) {
    if (value is int) {
      return DemoId._(value);
    } else if (value == null) {
      throw ArgumentError.notNull('value');
    } else {
      throw ArgumentError(
          'Value of DemoId must be of type int, but was ${value.runtimeType}. Please provide the correct type.');
    }
  }

  /// Creates an instance of DemoId from a int value.
  factory DemoId.fromValue(int value) {
    return DemoId._(value);
  }
}

/// Base model class for DemoModel.
@freezed
class DemoModel with _$DemoModel {
  const DemoModel._();

  /// Table name: `demos`
  static const String tableName = "demos";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for name field with JsonKey('name')
  static const String nameKey = "name";

  /// Field name for description field with JsonKey('description')
  static const String descriptionKey = "description";

  /// Field name for other field with JsonKey('null')
  static const String otherKey = "null";

  /// Constructor for DemoModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled` (`demos`)
  ///
  /// Fields:
  /// - DemoId id : JsonKey('id')
  /// - String? name : JsonKey('name')
  /// - String? description : JsonKey('description')
  /// - OtherModel? other : JsonKey('other')
  @TableModel(DemoModel.tableName)
  const factory DemoModel({
    @JsonKey(name: DemoModel.idKey) required DemoId id,
    @JsonKey(name: DemoModel.nameKey) String? name,
    @JsonKey(name: DemoModel.descriptionKey) String? description,
    @JoinedColumn(foreignKey: "other_id", candidateKey: null)
    @JsonKey(name: DemoModel.otherKey)
    OtherModel? other,
  }) = _DemoModel;

  /// Creates an instance of DemoModel from a JSON map.
  factory DemoModel.fromJson(Map<String, dynamic> json) =>
      _$DemoModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableDemoModel;
}

/// Represents the DemoDetailModel model. generated by kimapp_generator
@freezed
class DemoDetailModel with _$DemoDetailModel {
  const DemoDetailModel._();

  /// Table name: `v_demo_detail`
  static const String tableName = "v_demo_detail";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for name field with JsonKey('name')
  static const String nameKey = "name";

  /// Field name for description field with JsonKey('description')
  static const String descriptionKey = "description";

  /// Field name for other field with JsonKey('null')
  static const String otherKey = "null";

  /// Constructor for DemoDetailModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled`
  /// Table Name: `v_demo_detail`
  ///
  /// Fields:
  /// - DemoId id : JsonKey('id')
  /// - String? name : JsonKey('name')
  /// - String? description : JsonKey('description')
  /// - OtherModel? other : JsonKey('other')
  @TableModel(DemoDetailModel.tableName)
  const factory DemoDetailModel({
    @JsonKey(name: DemoDetailModel.idKey) required DemoId id,
    @JsonKey(name: DemoDetailModel.nameKey) required String? name,
    @JsonKey(name: DemoDetailModel.descriptionKey) required String? description,
    @JoinedColumn(foreignKey: "other_id", candidateKey: null)
    @JsonKey(name: DemoDetailModel.otherKey)
    required OtherModel? other,
  }) = _DemoDetailModel;

  /// Creates an instance of DemoDetailModel from a JSON map.
  factory DemoDetailModel.fromJson(Map<String, dynamic> json) =>
      _$DemoDetailModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableDemoDetailModel;
}

/// Represents the DemoLiteModel model. generated by kimapp_generator
@freezed
class DemoLiteModel with _$DemoLiteModel {
  const DemoLiteModel._();

  /// Table name: `test`
  static const String tableName = "test";

  /// Field name for id field with JsonKey('id')
  static const String idKey = "id";

  /// Field name for name field with JsonKey('name')
  static const String nameKey = "name";

  /// Field name for description field with JsonKey('description')
  static const String descriptionKey = "description";

  /// Field name for other field with JsonKey('null')
  static const String otherKey = "null";

  /// Constructor for DemoLiteModel.
  ///
  /// This class was generated by the Kimapp generator based on KimappSchema.
  ///
  /// Table Mode: `enabled`
  /// Table Name: `test`
  ///
  /// Fields:
  /// - DemoId id : JsonKey('id')
  /// - String? name : JsonKey('name')
  /// - String? description : JsonKey('description')
  /// - OtherModel? other : JsonKey('other')
  @TableModel(DemoLiteModel.tableName)
  const factory DemoLiteModel({
    @JsonKey(name: DemoLiteModel.idKey) required DemoId id,
    @JsonKey(name: DemoLiteModel.nameKey) required String? name,
    @JsonKey(name: DemoLiteModel.descriptionKey) required String? description,
    @JoinedColumn(foreignKey: "other_id", candidateKey: null)
    @JsonKey(name: DemoLiteModel.otherKey)
    required OtherModel? other,
  }) = _DemoLiteModel;

  /// Creates an instance of DemoLiteModel from a JSON map.
  factory DemoLiteModel.fromJson(Map<String, dynamic> json) =>
      _$DemoLiteModelFromJson(json);

  /// Supabase table configuration for this model.
  static const TableBuilder table = _tableDemoLiteModel;
}
